#include <xinu.h>
#include <kernel.h>
#include <stddef.h>
#include <stdio.h>
#include <string.h>

#if FS
#include <fs.h>

static struct fsystem fsdemo;
int numblocks;
int blocksize;
char *dev0_blocks;

extern int dev0;

char block_cache[512];

#define SB_BLK 0
#define BM_BLK 1
#define RT_BLK 2
#define INODES_PER_BLOCK (fsdemo.blocksz / sizeof(struct inode))
#define NUM_INODE_BLOCKS (( (fsdemo.ninodes % INODES_PER_BLOCK) == 0) ? fsdemo.ninodes / INODES_PER_BLOCK : (fsdemo.ninodes / INODES_PER_BLOCK) + 1)
#define FIRST_INODE_BLOCK 2
#define NUM_FD 16

struct filetable oft[NUM_FD];
int next_open_fd = 0;


int fs_fileblock_to_diskblock(int dev, int fd, int fileblock);

/* YOUR CODE GOES HERE */

int fs_fileblock_to_diskblock(int dev, int fd, int fileblock) {
  int diskblock;

  if (fileblock >= INODEBLOCKS - 2) {
    printf("No indirect block support\n");
    return SYSERR;
  }

  diskblock = oft[fd].in.blocks[fileblock]; //get the logical block address

  return diskblock;
}

/* read in an inode and fill in the pointer */
int fs_get_inode_by_num(int dev, int inode_number, struct inode *in) {
  int bl, inn;
  int inode_off;

  if (dev != 0) {
    printf("Unsupported device\n");
    return SYSERR;
  }
  if (inode_number > fsdemo.ninodes) {
    printf("fs_get_inode_by_num: inode %d out of range\n", inode_number);
    return SYSERR;
  }

  bl = inode_number / INODES_PER_BLOCK;
  inn = inode_number % INODES_PER_BLOCK;
  bl += FIRST_INODE_BLOCK;

  inode_off = inn * sizeof(struct inode);

  bs_bread(dev0, bl, 0, &block_cache[0], fsdemo.blocksz);
  memcpy(in, &block_cache[inode_off], sizeof(struct inode));

  return OK;

}

int fs_put_inode_by_num(int dev, int inode_number, struct inode *in) {
  int bl, inn;

  if (dev != 0) {
    printf("Unsupported device\n");
    return SYSERR;
  }
  if (inode_number > fsdemo.ninodes) {
    printf("fs_put_inode_by_num: inode %d out of range\n", inode_number);
    return SYSERR;
  }

  bl = inode_number / INODES_PER_BLOCK;
  inn = inode_number % INODES_PER_BLOCK;
  bl += FIRST_INODE_BLOCK;

  bs_bread(dev0, bl, 0, block_cache, fsdemo.blocksz);
  memcpy(&block_cache[(inn*sizeof(struct inode))], in, sizeof(struct inode));
  bs_bwrite(dev0, bl, 0, block_cache, fsdemo.blocksz);

  return OK;
}
     
int fs_mkfs(int dev, int num_inodes) {
  int i;
  
  if (dev == 0) {
    fsdemo.nblocks = dev0_numblocks;
    fsdemo.blocksz = dev0_blocksize;
  }
  else {
    printf("Unsupported device\n");
    return SYSERR;
  }

  if (num_inodes < 1) {
    fsdemo.ninodes = DEFAULT_NUM_INODES;
  }
  else {
    fsdemo.ninodes = num_inodes;
  }

  i = fsdemo.nblocks;
  while ( (i % 8) != 0) {i++;}
  fsdemo.freemaskbytes = i / 8; 
  
  if ((fsdemo.freemask = getmem(fsdemo.freemaskbytes)) == (void *)SYSERR) {
    printf("fs_mkfs memget failed.\n");
    return SYSERR;
  }
  
  /* zero the free mask */
  for(i=0;i<fsdemo.freemaskbytes;i++) {
    fsdemo.freemask[i] = '\0';
  }
  
  fsdemo.inodes_used = 0;
  
  /* write the fsystem block to SB_BLK, mark block used */
  fs_setmaskbit(SB_BLK);
  bs_bwrite(dev0, SB_BLK, 0, &fsdemo, sizeof(struct fsystem));
  
  /* write the free block bitmask in BM_BLK, mark block used */
  fs_setmaskbit(BM_BLK);
  bs_bwrite(dev0, BM_BLK, 0, fsdemo.freemask, fsdemo.freemaskbytes);

  return 1;
}

void print_fsdemo(void) {

  printf("fsdemo.ninodes: %d\n", fsdemo.ninodes);
  printf("sizeof(struct inode): %d\n", sizeof(struct inode));
  printf("INODES_PER_BLOCK: %d\n", INODES_PER_BLOCK);
  printf("NUM_INODE_BLOCKS: %d\n", NUM_INODE_BLOCKS);
}

/* specify the block number to be set in the mask */
int fs_setmaskbit(int b) {
  int mbyte, mbit;
  mbyte = b / 8;
  mbit = b % 8;

  fsdemo.freemask[mbyte] |= (0x80 >> mbit);
  return OK;
}

/* specify the block number to be read in the mask */
int fs_getmaskbit(int b) {
  int mbyte, mbit;
  mbyte = b / 8;
  mbit = b % 8;

  return( ( (fsdemo.freemask[mbyte] << mbit) & 0x80 ) >> 7);
  return OK;

}

/* specify the block number to be unset in the mask */
int fs_clearmaskbit(int b) {
  int mbyte, mbit, invb;
  mbyte = b / 8;
  mbit = b % 8;

  invb = ~(0x80 >> mbit);
  invb &= 0xFF;

  fsdemo.freemask[mbyte] &= invb;
  return OK;
}

/* This is maybe a little overcomplicated since the lowest-numbered
   block is indicated in the high-order bit.  Shift the byte by j
   positions to make the match in bit7 (the 8th bit) and then shift
   that value 7 times to the low-order bit to print.  Yes, it could be
   the other way...  */
void fs_printfreemask(void) {
  int i,j;

  for (i=0; i < fsdemo.freemaskbytes; i++) {
    for (j=0; j < 8; j++) {
      printf("%d", ((fsdemo.freemask[i] << j) & 0x80) >> 7);
    }
    if ( (i % 8) == 7) {
      printf("\n");
    }
  }
  printf("\n");
}

// Creates a file and returns the file descriptor

int fs_create(char *fname,int mode) {
	if (mode == O_CREAT){
	int i;
	int opendirent = -1;
	for(i=0;i<DIRECTORY_SIZE;i++){
		if(match(fname,fsdemo.root_dir.entry[i].name) ) {
			printf("A file already exists with this name. Please choose a different name");
			return -1;
		}
		if(fsdemo.root_dir.entry[i].inode_num == -1)
			opendirent = i;
	}
	if(opendirent == -1) {
		printf("No more files available\n");
		return -1;
	}	
	
	
	
	int m, inod; 
	for(m = 0;m<fsdemo.ninodes;m++) {
		struct inode free;
		fs_get_inode_by_num(0,m,&free);
		if(free.type == -1) {
			inod = free.id;
			break;
		}
	}

	struct inode fNode;
	fs_get_inode_by_num(0,inod,&fNode);
	fNode.nlink=0;
	fNode.size=0;
	fNode.type=1;
	
	fsdemo.root_dir.numentries++;

	copy(fsdemo.root_dir.entry[opendirent].name,fname);
	fsdemo.root_dir.entry[opendirent].inode_num = fNode.id;
	
	
	fs_put_inode_by_num(0,fNode.id,&fNode);
	
	return OK;
	}
}


// Flags handled: Flag is 1 (WILL APPEND TO FILE)
int fs_open(char *filename, int flags) {
	int i;
	int curInode_num =-1;
	for(i=0;i<DIRECTORY_SIZE;i++){
		if(match(filename,fsdemo.root_dir.entry[i].name)) {
			curInode_num = fsdemo.root_dir.entry[i].inode_num;
			break; 
		}
	}
	
	if(curInode_num == -1) {
		printf("File %s does not exist",filename);
		return -1;
	}
	
	struct inode newn;
	
	fs_get_inode_by_num(0, curInode_num, &newn);
	
	
	// Allocates file descriptor
	int fd = get_fd();
	if(fd == -1)
		return SYSERR;
		
	oft[fd].in = newn;
	oft[fd].state=1;
	oft[fd].fileptr=0;
	
	oft[fd].in.nlink++;
	if(flags==1) {
		oft[fd].fileptr=oft[fd].in.size;
	}
	
	// Update inode
	fs_put_inode_by_num(0,curInode_num,&oft[fd].in);
//	printf("Successfully opened file\n");
	return fd;
	
}
int fs_close(int fd) {
	if(oft[fd].state == -1) {
		printf("Bad file descriptor\n");
	}
	//Update inode and save to memory
	struct inode update;
	fs_get_inode_by_num(0,oft[fd].in.id,&update);
	update.nlink--;
	fs_put_inode_by_num(0,oft[fd].in.id,&update);
	

	oft[fd].state = -1;
	oft[fd].fileptr=0;
	
	return 0;
}

int fs_read(int fd, void *buf, int nbytes) {
	fs_get_inode_by_num(0,oft[fd].in.id,&oft[fd].in);
	if(oft[fd].in.size < nbytes + oft[fd].fileptr) {
		printf("Terminate reading because you want to read past end of file");
		return -1;
	}
	char* buff = buf;
	buff[0]='\0';
	int bytesread = 0;
	while(bytesread < nbytes) {
		int curBlock = oft[fd].fileptr/fsdemo.blocksz;
	// Check here to see if out of bounds
		int bytesOnCurBlock = fsdemo.blocksz - (oft[fd].fileptr%fsdemo.blocksz);
		
		if(bytesOnCurBlock < nbytes - bytesread) {
			char r[fsdemo.blocksz];
			int btor = fsdemo.blocksz - oft[fd].fileptr%fsdemo.blocksz;
			bs_bread(0,oft[fd].in.blocks[curBlock], oft[fd].fileptr%fsdemo.blocksz,&r,btor);
			oft[fd].fileptr += btor;
			cat(buf,r,btor);
			bytesread += btor;
		}
		// Only need to read on current block
		else {
			char r[fsdemo.blocksz];
			bs_bread(0,oft[fd].in.blocks[curBlock],oft[fd].fileptr%fsdemo.blocksz,&r,nbytes - bytesread);
			oft[fd].fileptr += nbytes - bytesread;
			cat(buf,r,nbytes-bytesread);
			bytesread += nbytes - bytesread;
		
		}	
	}
	fs_put_inode_by_num(0,oft[fd].in.id,&oft[fd].in);
	return OK;
}

int fs_write(int fd, void *buf, int nbytes) {
	fs_get_inode_by_num(0,oft[fd].in.id,&oft[fd].in);
	int block_num=(oft[fd].fileptr+nbytes)/fsdemo.blocksz+1;
	int cur_block_num = oft[fd].in.size/fsdemo.blocksz;
	if(oft[fd].in.size%fsdemo.blocksz != 0)
		cur_block_num++;

	int alloc_num;
	int i;
	if((alloc_num = block_num - cur_block_num) > 0){
		for(i = 0; i < alloc_num; i++){
			if(alloc_block(fd, cur_block_num) != -1)
				cur_block_num++;
			else {
				printf("cannot allocate block");
				fs_put_inode_by_num(0,oft[fd].in.id,&oft[fd].in);
				return -1;
			}
		}
	}
	
    
	int byteswrite = 0;
	while(byteswrite < nbytes) {
		int curBlock = oft[fd].fileptr/fsdemo.blocksz;
		int offset = oft[fd].fileptr % fsdemo.blocksz;
	// Check here to see if out of bounds
		int bytesOnCurBlock = fsdemo.blocksz - (oft[fd].fileptr%fsdemo.blocksz);
		
		if(bytesOnCurBlock < nbytes - byteswrite) {
			char* buff = ((char*) buf);
			bs_bwrite(0,oft[fd].in.blocks[curBlock],offset ,&buff[byteswrite],bytesOnCurBlock);
			oft[fd].fileptr += bytesOnCurBlock;
			byteswrite += bytesOnCurBlock;
			if(oft[fd].fileptr > oft[fd].in.size) {
				oft[fd].in.size = oft[fd].fileptr;
				//TODO INODE on "DISK" IS NOT LONGER VALID
			}
		}
		// Only need to read on current block
		else {
			char* buff = ((char*) buf);
			bs_bwrite(0,oft[fd].in.blocks[curBlock],offset, &buff[byteswrite],nbytes - byteswrite);
			oft[fd].fileptr += nbytes - byteswrite;
			byteswrite += nbytes - byteswrite;
			if(oft[fd].fileptr > oft[fd].in.size) {
				oft[fd].in.size = oft[fd].fileptr;
			}
		
		}	
	}
	fs_put_inode_by_num(0,oft[fd].in.id,&oft[fd].in);
	return byteswrite;
}

int fs_seek(int fd, int offset) {
// TODO check to see if seeking runs past the end of the file
	int nptr = oft[fd].fileptr + offset;
	if(nptr> oft[fd].in.size) {
		printf("Fileptr moved past the end of the current file size\n");
		return -1;
	}
	if(nptr/fsdemo.blocksz > INODEBLOCKS) {
		printf("Fileptr moved to out of bounds\n");
	}
	else
		oft[fd].fileptr = nptr;
	
	return 0;
}

int get_fd() {
	int i;
	for(i = 0;i<DIRECTORY_SIZE*2;i++) {
		if(oft[i].state == -1) {
			return i;
		}
	}
	printf("No File Descriptor Free\n");
	return -1;
}

int alloc_block(int fd, int num){
	int i;
	for(i = 0; i < fsdemo.nblocks; i++){
		if(fs_getmaskbit(i) == 0){
			oft[fd].in.blocks[num] = i;
			fs_setmaskbit(i);
			return 0;
		} 
	} 
	return -1; 
}


int match(char* a, char* b) {
	int index = 0;
	while(a[index] == b[index] && a[index] != '\0' && b[index] != '\0') {
		index++;
	}
	if(a[index] == '\0' && b[index] == '\0') {
		return 1;
	}
	return 0;
}

int copy(char*a,char* b) {
	int i = 0;
	while(b[i]!='\0' && i<FILENAMELEN-1) {
		a[i]=b[i];
		i++;
	}
	a[i]='\0';
	return 0;
}

int cat(char*a,char*b,int length) {
	int len = 0;
	while(a[len]!='\0')
		len++;
		
	int i = 0;
	while(i<length) {
		a[len++]=b[i++];
	}
	a[len]='\0';
	return 0;
}
#endif /* FS */
